#include "MK66F18.h"

typedef struct Processor_Type
{
    ADC_Type      * const R_ADC0             = ( (ADC_Type      * const) ADC0_BASE             );
    ADC_Type      * const R_ADC1             = ( (ADC_Type      * const) ADC1_BASE             );
    AIPS_Type     * const R_AIPS0            = ( (AIPS_Type     * const) AIPS0_BASE            );
    AIPS_Type     * const R_AIPS1            = ( (AIPS_Type     * const) AIPS1_BASE            );
    AXBS_Type     * const R_AXBS             = ( (AXBS_Type     * const) AXBS_BASE             );
    CAN_Type      * const R_CAN0             = ( (CAN_Type      * const) CAN0_BASE             );
    CAN_Type      * const R_CAN1             = ( (CAN_Type      * const) CAN1_BASE             );
    CAU_Type      * const R_CAU              = ( (CAU_Type      * const) CAU_BASE              );
    CMP_Type      * const R_CMP0             = ( (CMP_Type      * const) CMP0_BASE             );
    CMP_Type      * const R_CMP1             = ( (CMP_Type      * const) CMP1_BASE             );
    CMP_Type      * const R_CMP2             = ( (CMP_Type      * const) CMP2_BASE             );
    CMP_Type      * const R_CMP3             = ( (CMP_Type      * const) CMP3_BASE             );
    CMT_Type      * const R_CMT              = ( (CMT_Type      * const) CMT_BASE              );
    CRC_Type      * const R_CRC0             = ( (CRC_Type      * const) CRC_BASE              );
    DAC_Type      * const R_DAC0             = ( (DAC_Type      * const) DAC0_BASE             );
    DAC_Type      * const R_DAC1             = ( (DAC_Type      * const) DAC1_BASE             );
    DMA_Type      * const R_DMA0             = ( (DMA_Type      * const) DMA_BASE              );
    DMAMUX_Type   * const R_DMAMUX           = ( (DMAMUX_Type   * const) DMAMUX_BASE           );
    ENET_Type     * const R_ENET             = ( (ENET_Type     * const) ENET_BASE             );
    EWM_Type      * const R_EWM              = ( (EWM_Type      * const) EWM_BASE              );
    FB_Type       * const R_FB               = ( (FB_Type       * const) FB_BASE               );
    FMC_Type      * const R_FMC              = ( (FMC_Type      * const) FMC_BASE              );
    FTFE_Type     * const R_FTFE             = ( (FTFE_Type     * const) FTFE_BASE             );
    FTM_Type      * const R_FTM0             = ( (FTM_Type      * const) FTM0_BASE             );
    FTM_Type      * const R_FTM1             = ( (FTM_Type      * const) FTM1_BASE             );
    FTM_Type      * const R_FTM2             = ( (FTM_Type      * const) FTM2_BASE             );
    FTM_Type      * const R_FTM3             = ( (FTM_Type      * const) FTM3_BASE             );
    GPIO_Type     * const R_GPIOA            = ( (GPIO_Type     * const) GPIOA_BASE            );
    GPIO_Type     * const R_GPIOB            = ( (GPIO_Type     * const) GPIOB_BASE            );
    GPIO_Type     * const R_GPIOC            = ( (GPIO_Type     * const) GPIOC_BASE            );
    GPIO_Type     * const R_GPIOD            = ( (GPIO_Type     * const) GPIOD_BASE            );
    GPIO_Type     * const R_GPIOE            = ( (GPIO_Type     * const) GPIOE_BASE            );
    I2C_Type      * const R_I2C0             = ( (I2C_Type      * const) I2C0_BASE             );
    I2C_Type      * const R_I2C1             = ( (I2C_Type      * const) I2C1_BASE             );
    I2C_Type      * const R_I2C2             = ( (I2C_Type      * const) I2C2_BASE             );
    I2C_Type      * const R_I2C3             = ( (I2C_Type      * const) I2C3_BASE             );
    I2S_Type      * const R_I2S0             = ( (I2S_Type      * const) I2S0_BASE             );
    LLWU_Type     * const R_LLWU             = ( (LLWU_Type     * const) LLWU_BASE             );
    LMEM_Type     * const R_LMEM             = ( (LMEM_Type     * const) LMEM_BASE             );
    LPTMR_Type    * const R_LPTMR0           = ( (LPTMR_Type    * const) LPTMR0_BASE           );
    LPUART_Type   * const R_LPUART0          = ( (LPUART_Type   * const) LPUART0_BASE          );
    MCG_Type      * const R_MCG              = ( (MCG_Type      * const) MCG_BASE              );
    MCM_Type      * const R_MCM              = ( (MCM_Type      * const) MCM_BASE              );
    NV_Type       * const R_FTFE_FlashConfig = ( (NV_Type       * const) FTFE_FlashConfig_BASE );
    OSC_Type      * const R_OSC              = ( (OSC_Type      * const) OSC_BASE              );
    PDB_Type      * const R_PDB0             = ( (PDB_Type      * const) PDB0_BASE             );
    PIT_Type      * const R_PIT              = ( (PIT_Type      * const) PIT_BASE              );
    PMC_Type      * const R_PMC              = ( (PMC_Type      * const) PMC_BASE              );
    PORT_Type     * const R_PORTA            = ( (PORT_Type     * const) PORTA_BASE            );
    PORT_Type     * const R_PORTB            = ( (PORT_Type     * const) PORTB_BASE            );
    PORT_Type     * const R_PORTC            = ( (PORT_Type     * const) PORTC_BASE            );
    PORT_Type     * const R_PORTD            = ( (PORT_Type     * const) PORTD_BASE            );
    PORT_Type     * const R_PORTE            = ( (PORT_Type     * const) PORTE_BASE            );
    RCM_Type      * const R_RCM              = ( (RCM_Type      * const) RCM_BASE              );
    RFSYS_Type    * const R_RFSYS            = ( (RFSYS_Type    * const) RFSYS_BASE            );
    RFVBAT_Type   * const R_RFVBAT           = ( (RFVBAT_Type   * const) RFVBAT_BASE           );
    RNG_Type      * const R_RNG              = ( (RNG_Type      * const) RNG_BASE              );
    RTC_Type      * const R_RTC              = ( (RTC_Type      * const) RTC_BASE              );
    SDHC_Type     * const R_SDHC             = ( (SDHC_Type     * const) SDHC_BASE             );
    SIM_Type      * const R_SIM              = ( (SIM_Type      * const) SIM_BASE              );
    SDRAM_Type    * const R_SDRAM            = ( (SDRAM_Type    * const) SDRAM_BASE            );
    SMC_Type      * const R_SMC              = ( (SMC_Type      * const) SMC_BASE              );
    SPI_Type      * const R_SPI0             = ( (SPI_Type      * const) SPI0_BASE             );
    SPI_Type      * const R_SPI1             = ( (SPI_Type      * const) SPI1_BASE             );
    SPI_Type      * const R_SPI2             = ( (SPI_Type      * const) SPI2_BASE             );
    SYSMPU_Type   * const R_SYSMPU           = ( (SYSMPU_Type   * const) SYSMPU_BASE           );
    TPM_Type      * const R_TPM1             = ( (TPM_Type      * const) TPM1_BASE             );
    TPM_Type      * const R_TPM2             = ( (TPM_Type      * const) TPM2_BASE             );
    TSI_Type      * const R_TSI0             = ( (TSI_Type      * const) TSI0_BASE             );
    UART_Type     * const R_UART0            = ( (UART_Type     * const) UART0_BASE            );
    UART_Type     * const R_UART1            = ( (UART_Type     * const) UART1_BASE            );
    UART_Type     * const R_UART2            = ( (UART_Type     * const) UART2_BASE            );
    UART_Type     * const R_UART3            = ( (UART_Type     * const) UART3_BASE            );
    UART_Type     * const R_UART4            = ( (UART_Type     * const) UART4_BASE            );
    USB_Type      * const R_USB0             = ( (USB_Type      * const) USB0_BASE             );
    USBDCD_Type   * const R_USBDCD           = ( (USBDCD_Type   * const) USBDCD_BASE           );
    USBHS_Type    * const R_USBHS            = ( (USBHS_Type    * const) USBHS_BASE            );
    USBHSDCD_Type * const R_USBHSDCD         = ( (USBHSDCD_Type * const) USBHSDCD_BASE         );
    USBPHY_Type   * const R_USBPHY           = ( (USBPHY_Type   * const) USBPHY_BASE           );
    VREF_Type     * const R_VREF             = ( (VREF_Type     * const) VREF_BASE             );
    WDOG_Type     * const R_WDOG             = ( (WDOG_Type     * const) WDOG_BASE             );
};

static Processor_Type const Processor;